# report_generator.py

import os
import logging
import pandas as pd
from utils import setup_logging, get_logger, MODELS_DIR

from markdown import markdown
from weasyprint import HTML

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
setup_logging()
logger = get_logger(__name__)

logger.info("==========================")
logger.info("== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ üìÑ ==")
logger.info("==========================")

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
report_dir = "reports"
os.makedirs(report_dir, exist_ok=True)

txt_path = os.path.join(report_dir, "final_model_report.txt")
md_path = os.path.join(report_dir, "final_model_report.md")
pdf_path = os.path.join(report_dir, "final_model_report.pdf")

# === –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á ===
tasks = {
    "regression": [
        "reg_ic50", "reg_cc50", "reg_si"
    ],
    "classification": [
        "clf_ic50_median", "clf_cc50_median", "clf_si_median", "clf_si_gt8"
    ]
}

# === –°–±–æ—Ä –æ—Ç—á–µ—Ç–∞ ===
lines = []
lines.append("# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º\n")
lines.append("## –ó–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏\n")

for task in tasks["regression"]:
    path = os.path.join(MODELS_DIR, "regression", task, f"{task}_metrics.joblib")
    if os.path.exists(path):
        metrics = pd.read_pickle(path)
        lines.append(f"### {task}")
        for k, v in metrics.items():
            lines.append(f"- **{k}**: {v:.4f}")
        lines.append("")
    else:
        lines.append(f"### {task} ‚Äî ‚ùå –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")

lines.append("## –ó–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")

for task in tasks["classification"]:
    path = os.path.join(MODELS_DIR, "classification", task, f"{task}_metrics.joblib")
    if os.path.exists(path):
        metrics = pd.read_pickle(path)
        lines.append(f"### {task}")
        for k, v in metrics.items():
            lines.append(f"- **{k}**: {v:.4f}")
        lines.append("")
    else:
        lines.append(f"### {task} ‚Äî ‚ùå –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ .txt –∏ .md ===
with open(txt_path, "w") as f:
    f.write("\n".join(lines))
with open(md_path, "w") as f:
    f.write("\n".join(lines))

# === –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF —Å –ø–æ–º–æ—â—å—é weasyprint ===
html_content = markdown("\n".join(lines))
HTML(string=html_content).write_pdf(pdf_path)
logger.info(f"üìÑ –û—Ç—á—ë—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {report_dir}")
