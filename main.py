import logging
from utils import setup_logging, get_logger
import subprocess
import os
import sys


# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
setup_logging()
logger = get_logger(__name__)


# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
requirements_file = "requirements.txt"
logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ {requirements_file}...")

if os.path.exists(requirements_file):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.executable, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pip –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        command = [sys.executable, "-m", "pip", "install", "-r", requirements_file]
        result = subprocess.run(command, check=True, capture_output=True, text=True, encoding='utf-8')
        logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–ª–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        # –ï—Å–ª–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã, pip –≤—ã–≤–µ–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ stdout
        if result.stdout:
            logger.debug(f"–í—ã–≤–æ–¥ pip:\n{result.stdout}")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ {requirements_file}:")
        logger.error(e.stderr)
        logger.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –æ—à–∏–±–∫—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        sys.exit(1) # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    except FileNotFoundError:
        logger.error("‚ùå –ö–æ–º–∞–Ω–¥–∞ 'pip' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Python –∏ pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH.")
        sys.exit(1)
else:
    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")





logger.info("==========================")
logger.info("== –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á ‚úÖ ==")
logger.info("==========================")

# === EDA (–ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞) ===
eda_scripts = [
    "eda_general.py",
    # "eda_clf.py",
    # "eda_reg.py"
]

# === –ó–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ===
classification_scripts = [
    "clf_ic50_median.py",
    "clf_cc50_median.py",
    "clf_si_median.py",
    "clf_si_gt8.py",
]

# === –ó–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ===
regression_scripts = [
    "reg_ic50.py",
    "reg_cc50.py",
    "reg_si.py",
]

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ===
extra_scripts = [
    "sanity_check.py",
    "report_generator.py",
]

# === –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ ===
all_scripts = eda_scripts + classification_scripts + regression_scripts + extra_scripts

# === –ó–∞–ø—É—Å–∫ ===
for script in all_scripts:
    script_path = os.path.join(os.getcwd(), script)  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–∫—Ä–∏–ø—Ç—É
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫: {script_path}")
    
    if os.path.exists(script_path):
        try:
            subprocess.run(["python", script_path], check=True)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {script}")
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script}: {e}")
    else:
        logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")

logger.info("===========================")
logger.info("== –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚úÖ ==")
logger.info("===========================")
